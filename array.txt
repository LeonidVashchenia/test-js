const clients = ["Mango", "Poly", "Ajax"];
console.log(clients[0]); - доступ до елемемнта.
Масив - структура даних для зберігання і маніпулювання колекцією індексованих значень. Використовується для зберігання впорядкованих колекцій даних.
[] - літерал масиву.Колекцією індексованих значень.вони передаються за посиланням (by reference).

Властивості:
довжина масиву - console.log(clients.length);
індекс останнього елеманта - console.log(clients[clients.length - 1]);

Методи:
arr.split(delimiter) - перетворює рядок в масив, «розбиваючи» його delimiter.
arr.join(delimiter) - об'єднує елементи масиву у рядок.
arr.indexOf(value) - повертає перший індекс, в якому value був знайдений в масиві, або число -1, якщо такий елемент відсутній.
arr.includes(value) - перевіряє, чи містить масив елемент зі значенням value і повертає true або false відповідно. Застосування цього методу корисне в ситуаціях, коли необхідно перевірити, чи є елемент в масиві і не важлива його позиція (індекс).
arr.push() - додає один або декілька елементів наприкінці масив.Повертає довжину масиву після додавання елементів.
arr.pop() - видаляє останній елемент з кінця масиву і повертає видалений елемент.
arr.unshift / arr.shift - додає / видаляє на початку масива


Метод forEach():
массив.forEach(function callback(element, index, array) {
  // Тіло колбек-функції
});
Метод перебирання масиву, який використовується для заміни циклів for і for...of в роботі з колекцією даних.
Поелементо перебирає масив.
Викликає колбек-функцію для кожного елемента масиву.
Нічого не повертає.

Метод map():
використовується для трансформації масиву
массив.map((element, index, array) => {
  // Тіло колбек-функції
});
Поелементо перебирає оригінальний масив.
Не змінює оригінальний масив.
Результат роботи колбек-функції записується у новий масив.
Повертає новий масив однакової довжини.





const clients = ["Mango", "Ajax", "Poly"];
«перебрати» його поелементно.
for (let i = 0; i < clients.length; i += 1) {
  console.log(clients[i]);
}
«перебрати» ітерабельний об'єкт.якщо не потрібен доступ до лічильника ітерації.
for (const variable of iterable) {
  // тіло циклу
}

Оператор break - перериває цикл

const clients = ["Mango", "Poly", "Ajax"];
const clientNameToFind = "Poly";
let message = "Клієнт з таким ім'ям відсутній в базі даних!";

for (const client of clients) {
  if (client === clientNameToFind) {
    message = "Клієнт з таким ім'ям є в базі даних!";
    break;
  }
  // Якщо не збігається, то на цій ітерації нічого не робимо
}

console.log(message); // Клієнт з таким ім'ям є в базі даних!

Оператор continue - перериває ітерацію

const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];
const threshold = 15;
for (let i = 0; i < numbers.length; i += 1) {
  if (numbers[i] < threshold) {
    continue;
  }
  console.log(`Число більше за ${threshold}: ${numbers[i]}`); // 18, 29, 34
}