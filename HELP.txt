Browser Object Model (BOM) - інтерфейс для роботи з вкладкою браузера. Містить набір властивостей і методів.
Document Object Model (DOM) - Об'єктна модель документа. Інтерфейс для роботи з HTML документом.Кожен вузол - це JavaScript-об'єкт з властивостями і методами.<tag> - Вузли-елементи (element node), <content> - Текстові вузли (text node).
document - це частина глобального об'єкта window, з нього отримуємо посилання на будь-який елемент.предок (ancestor), нащадок (descendant), батько (parent), дитина (child) і сусід (sibling).

Властивості навігації по DOM:
elem.parentNode - вибере батьківський elem.
elem.childNodes / elem.children  - псевдомасив, зберігає всі дочірні / вузли-едементи.
elem.firstChild / elem.firstElementChild - вибере перший дочірній елемент / вузол-елемент всередині elem.
elem.lastChild / elem.lastElementChild - вибере останній дочірній елемент / вузол-елемент всередині elem.
elem.previousSibling / elem.previousElementSibling - вибере елемент / вузол-елемент «зліва» від elem .
elem.nextSibling / elem.nextElementSibling- вибере елемент / вузол-елемент «праворуч» від elem.

метод - element.querySelector(selector) - вертає перший елемент або null.
метод - element.querySelectorAll(selector) - вертає колекцію(псевдомасив) елементів або [].
метод - document.createElement(tagName) - створює елемент з ім'ям tagName і повертає посилання на нього.

властивість - HTML-атрибути(data-атрибути), textContent, classList, style, innerHTML, disabled(boolean)

disabled - вимкнена кнопка і не вибканий чек 
but.disabled = !event.currentTarget.checked


value - містить поточний текстовий контент елементів форм.
checked - зберігає стан чекбокса або радіокнопки.
name - зберігає значення, вказане в HTML-атрибуті name.
src - шлях до зображення тегу <img>.
методи для роботи з атрибутами:
elem.hasAttribute(name) - перевіряє наявність атрибута, повертає true або false.
elem.getAttribute(name) - отримує значення атрибута і повертає його.
elem.setAttribute(name, value) - встановлює атрибут.
elem.removeAttribute(name) - видаляє атрибут.
elem.attributes - властивість, що повертає об'єкт усіх атрибутів елемента.

data-атрибути додають до тегу довільний атрибут і дозволяють отримати його значення.
Для отримання значення data-атрибута використовується властивість dataset, після якого стоїть ім'я атрибута. Тобто data- відкидається, а інша частина імені записується як ім'я властивості об'єкта.
const saveBtn = document.querySelector('button[data-action="save"]');
console.log(saveBtn.dataset.action); // "save"

в classList зберігається об'єкт з методами для роботи з класами елемента. 
методи classList:
elem.classList.contains(cls) - повертає true або false
elem.classList.add(cls) - додає клас cls до списку класів елемента.
elem.classList.remove(cls) - видаляє клас cls зі списку класів елемента.
elem.classList.toggle(cls) - якщо відсутній додає клас cls або навпаки - видаляє.
elem.classList.replace(oldClass, newClass) - замінює існуючий клас.
className = 'cls' - видалить всі класи і запише .cls

style для читання та зміни інлайнових стилів. Повертає об'єкт CSSStyleDeclaration. element.style.backgroundColor.
style.cssText = 'color: red, font-size: 50px'

innerHTML - вертає весь тексотвий контент з тегами.
title.innerHTML ='' - очищає
title.innerHTML ='<p>Абзац</p>' - записується
elem.insertAdjacentHTML(position, string);
 - "beforebegin" - перед elem
 - "afterbegin" - всередині elem, перед усіма дітьми
 - "beforeend" - всередині elem, після усіх дітей
 - "afterend" - після elem

const article = document.querySelector(".article");
console.log(article.innerHTML);

Створення вузла-елемента - document.createElement(tagName);

const heading = document.createElement("h1");
console.log(heading); // <h1></h1>

heading.textContent = "This is a heading";
console.log(heading); // <h1>This is a heading</h1>

const image = document.createElement("img");
image.src = "https://placeimg.com/640/480/nature";
image.alt = "Nature";
console.log(image); // <img src="https://placeimg.com/640/480/nature" alt="Nature" />

Додавання вузла-елемента до DOM.
element.append(el1, el2) - додає елемент/и після всіх дітей element.
element.prepend(el1, el2) - додає елемент/и перед усіма дітьми елемента element.
element.after(el1, el2) - елемент/и після елемента element.
element.before(el1, el2) - елемент/и  перед елементом element.

Видалення вузла-елемента з DOM.
elem.remove();
const text = document.querySelector('.text');
text.remove();

